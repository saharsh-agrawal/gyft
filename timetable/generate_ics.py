from __future__ import print_function

from icalendar import Calendar, Event
from datetime import timedelta
from timetable import Course
from utils import academic_calander_handler, dates, build_event_duration, generate_india_time
from utils.holidays_handler import get_holidays


def generate_ics(courses: list[Course], output_filename, is_web=False):
    """
    Creates an ICS file `timetable.ics` with the timetable data present inside the 'timetable' parameter.
    """
    cal = Calendar()
    cal.add("prodid", "-//Your Timetable generated by GYFT//mxm.dk//")
    cal.add("version", "2.0")

    # Build exhaustive list of class-off dates for the semester
    class_off_days = dates.get_class_off_dates_in_semester()

    # Helper: find first occurrence of course.day on/after SEM_BEGIN
    def first_occurrence_of_day(day_name: str):
        return dates.next_weekday(dates.SEM_BEGIN, day_name)

    # For each course, create a single weekly recurring VEVENT with EXDATEs on class-off days
    for course in courses:
        first_day = first_occurrence_of_day(course.day)
        lecture_begin = generate_india_time(
            first_day.year, first_day.month, first_day.day, course.start_time, 0
        )

        # Recurrence end: last occurrence should not exceed END_TERM_BEGIN
        until = dates.END_TERM_BEGIN

        event = build_event_duration(
            course.title,
            course.code,
            lecture_begin,
            course.duration,
            course.get_location(),
            "weekly",
            until,
        )

        # Compute EXDATE list: class-off days that fall on the course weekday
        # Build exclusion timestamps at the same local time as lecture_begin
        exdates = []
        for off_day in class_off_days:
            if off_day.weekday() == first_day.weekday():
                ex_dt = generate_india_time(
                    off_day.year, off_day.month, off_day.day, course.start_time, 0
                )
                # Only exclude occurrences within [lecture_begin, until)
                if lecture_begin <= ex_dt < until:
                    exdates.append(ex_dt)

        if exdates:
            # icalendar supports adding list of datetimes as EXDATE
            event.add("exdate", exdates)

        cal.add_component(event)

    # add holidays (as all-day events in Asia/Kolkata)
    for holiday in get_holidays():
        event = Event()
        event.add("summary", "INSTITUTE HOLIDAY : " + holiday[0])
        hdt = holiday[1]
        hend = hdt + timedelta(days=1)
        event.add("dtstart", hdt)
        event.add("dtend", hend)
        cal.add_component(event)

    for entry in academic_calander_handler.get_academic_calendar(is_web):
        event = Event()
        event.add("summary", entry.event)
        event.add("dtstart", entry.start_date)
        event.add("dtend", entry.end_date)
        cal.add_component(event)

    if output_filename:
        with open(output_filename, "wb") as f:
            f.write(cal.to_ical())
            print("\nYour timetable has been written to %s" % output_filename)

    return cal.to_ical()
